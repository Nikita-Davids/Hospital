@model Hospital.Models.PatientVital

@{
    ViewData["Title"] = "Add Patient Vitals";
    Layout = "~/Views/Shared/_LayoutNurse.cshtml";
}
@if (TempData["SuccessMessage"] != null)
{
    <div id="successMessage" class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["AlertMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["AlertMessage"]
    </div>
}

<style>
        .validation-message {
        font-size: 0.9em;
        margin-top: 5px;
    }

</style>


<h1>@ViewData["Title"]</h1>

<div class="form-container">
    <form asp-action="NurseAddPatientVital">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="PatientId" class="control-label">Patient ID</label>
            <!-- Display the patient name in a read-only text box -->
            <input type="text" value="@ViewBag.SelectedPatientName" class="form-control" readonly />

            <!-- Use a hidden field to store the PatientId for form submission -->
            <input type="hidden" name="PatientId" value="@ViewBag.PatientId" />
        </div>

        <div class="form-group">
            <label asp-for="Weight" class="control-label"></label>
            <input asp-for="Weight" class="form-control" />
            <span asp-validation-for="Weight" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Height" class="control-label"> Height in (m)</label>
            <input asp-for="Height" class="form-control" />
            <span asp-validation-for="Height" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="BMI" class="control-label"></label>
            <input asp-for="BMI" class="form-control" id="BMI" readonly step="0,01" />
            <span asp-validation-for="BMI" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Tempreture" class="control-label"></label>
            <input asp-for="Tempreture" class="form-control" id="TemperatureInput" />
            <span asp-validation-for="Tempreture" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="BloodPressure" class="control-label">Blood Pressure</label>
            <input asp-for="BloodPressure" class="form-control" />
            <span asp-validation-for="BloodPressure" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Pulse" class="control-label"></label>
            <input asp-for="Pulse" class="form-control" id="PulseInput" />
            <span asp-validation-for="Pulse" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Respiratory" class="control-label"></label>
            <input asp-for="Respiratory" class="form-control" />
            <span asp-validation-for="Respiratory" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="BloodOxygen" class="control-label">Oxygen Saturation</label>
            <input asp-for="BloodOxygen" class="form-control" id="BloodOxygenInput" />
            <span asp-validation-for="BloodOxygen" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="BloodGlucoseLevel" class="control-label">Blood Glucose Level</label>
            <input asp-for="BloodGlucoseLevel" class="form-control" />
            <span asp-validation-for="BloodGlucoseLevel" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="VitalTime" class="control-label">Vital Time</label>
            <input asp-for="VitalTime" class="form-control" type="time" />
            <span asp-validation-for="VitalTime" class="text-danger"></span>
        </div>
        <div class="form-group button-container">
            <input type="submit" value="Add" class="btn btn-primary" />
        </div>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Input fields
        var weightInput = document.querySelector("[name='Weight']");
        var heightInput = document.querySelector("[name='Height']");
        var bmiInput = document.getElementById("BMI");
        var temperatureInput = document.querySelector("[name='Tempreture']");
        var pulseInput = document.querySelector("[name='Pulse']");
        var bloodOxygenInput = document.querySelector("[name='BloodOxygen']");
        var bloodPressureInput = document.querySelector("[name='BloodPressure']");

        // Helper function to show messages
        function showMessage(element, message) {
            var messageElement = element.nextElementSibling; // Assuming the message div follows the input field
            if (!messageElement || !messageElement.classList.contains("validation-message")) {
                messageElement = document.createElement("div");
                messageElement.classList.add("validation-message");
                messageElement.style.color = "red";
                element.parentNode.insertBefore(messageElement, element.nextSibling);
            }
            messageElement.textContent = message;
        }

        // Helper function to clear messages
        function clearMessage(element) {
            var messageElement = element.nextElementSibling;
            if (messageElement && messageElement.classList.contains("validation-message")) {
                messageElement.textContent = "";
            }
        }

        // Function to calculate BMI
        function calculateBMI() {
            var weight = parseFloat(weightInput.value);
            var height = parseFloat(heightInput.value);
            if (!isNaN(weight) && !isNaN(height) && height > 0) {
                var bmi = weight / (height * height);
                bmi = bmi.toFixed(2); // Round to 2 decimal places
                bmiInput.value = bmi;

                // Show message if BMI is out of range
                if (bmi < 18.5 || bmi > 24.9) {
                    showMessage(bmiInput, "BMI is outside the normal range (18.5 - 24.9).");
                } else {
                    clearMessage(bmiInput);
                }
            } else {
                bmiInput.value = ""; // Clear BMI if inputs are invalid
                clearMessage(bmiInput);
            }
        }

        // Event listeners for BMI calculation
        weightInput.addEventListener("blur", calculateBMI);
        heightInput.addEventListener("blur", calculateBMI);

        // Function to validate temperature
        function validateTemperature() {
            var temperature = parseFloat(temperatureInput.value);
            if (!isNaN(temperature)) {
                if (temperature > 37 || temperature < 34) {
                    showMessage(temperatureInput, "Temperature is out of the normal range (34 - 37°C).");
                } else {
                    clearMessage(temperatureInput);
                }
            } else {
                clearMessage(temperatureInput);
            }
        }

        // Event listener for temperature validation
        temperatureInput.addEventListener("blur", validateTemperature);

        // Function to validate pulse rate
        function validatePulse() {
            var pulse = parseFloat(pulseInput.value);
            if (!isNaN(pulse)) {
                if (pulse > 100 || pulse < 60) {
                    showMessage(pulseInput, "Pulse rate is out of the normal range (60 - 100 bpm).");
                } else {
                    clearMessage(pulseInput);
                }
            } else {
                clearMessage(pulseInput);
            }
        }

        // Event listener for pulse rate validation
        pulseInput.addEventListener("blur", validatePulse);

        // Function to validate oxygen saturation
        function validateOxygenSaturation() {
            var bloodOxygen = parseFloat(bloodOxygenInput.value);
            if (!isNaN(bloodOxygen)) {
                if (bloodOxygen < 95) {
                    showMessage(bloodOxygenInput, "Oxygen saturation is below the normal range (95%).");
                } else {
                    clearMessage(bloodOxygenInput);
                }
            } else {
                clearMessage(bloodOxygenInput);
            }
        }

        // Event listener for oxygen saturation validation
        bloodOxygenInput.addEventListener("blur", validateOxygenSaturation);

        // Function to validate blood pressure
        function validateBloodPressure() {
            var bloodPressure = bloodPressureInput.value;
            if (bloodPressure && bloodPressure.includes("/")) {
                var parts = bloodPressure.split("/");
                var systolic = parseInt(parts[0]);
                var diastolic = parseInt(parts[1]);

                if (!isNaN(systolic) && !isNaN(diastolic)) {
                    if (systolic > 140 || diastolic > 90) {
                        showMessage(bloodPressureInput, "Blood Pressure is too high! (Systolic > 140 or Diastolic > 90).");
                    } else if (systolic < 90 || diastolic < 60) {
                        showMessage(bloodPressureInput, "Blood Pressure is too low! (Systolic < 90 or Diastolic < 60).");
                    } else {
                        clearMessage(bloodPressureInput);
                    }
                } else {
                    showMessage(bloodPressureInput, "Invalid Blood Pressure format. Use '120/80'.");
                }
            } else {
                clearMessage(bloodPressureInput);
            }
        }

        // Event listener for blood pressure validation
        bloodPressureInput.addEventListener("blur", validateBloodPressure);
    });
</script>
